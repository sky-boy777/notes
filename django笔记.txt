1、新建项目文件
2、创建虚拟环境 ：python -m venv 虚拟环境名字
3、激活虚拟环境： cd  Scripts，   然后 ：.\activate或linux下使用source activate
3、退出虚拟环境：deactivate

4、创建Django项目： django-admin startproject 项目名 
5、创建应用：python manage.py startapp 应用名字
6、运行：python manage.py runserver

7、生成迁移数据库文件： python manage.py  makemigrations
8、生成数据库表： python manage.py  migrate
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
django开启事务：
使用装饰器，需要导入，可以设置保存点，方便回滚到保存点位置
from django.db import transaction
1、
with transaction.atomic():      开启事务，在with里面
    sql语句1
    sql语句2

2、
@transaction.atomic
def xxx(self, request):
    pass

-----------------------------------------------------------------------------------------------------------------------------
 uwsgi启动：uwsgi uwsgi.ini
 关闭：uwsgi  --stop   uwsgi.pid   或 kill  -9   进程id
 重启：uwsgi --reload uwsgi.ini
 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
模型：
M：模型
T：模板（c）
V：视图（v）

django框架：快速开发，不重复做一些东西

ORM：
object relations mapping 对象关系映射

orm模型常用字段：
AutoField                    主键，primary_key=True
CharField                     varchar, verbose_name字段注释，max_length长度
IntegrField                   int
BigIntegerField             bigint
DecimalField                max_digits=8总位数, decimal_places=2小数位 
EmailField                    varchar(254)
DateField                     date
DateTimeField             datetime, 日期都有两个参数：auto_now每次更新日期，auto_now_add创建时添加日期
BooleanField               传布尔值True，False，但数据库存 0 或 1 
TextField                     大段文本类型
FileField                      文件，upload_to='文件路径'，传文件自动保存到该路径，数据库存路径
ImageField                  图片，使用：{{ user.avatar.url }} 自动生成  /media/avatar/default.jpg

自定义模型字段：
class MyCharField(models.Field):
    def __init__(self, max_length, *args, **kwargs):
        self.max_length = max_length
        super().__init__(max_length=max_length, *args, **kwargs)

    def db_type(self, connection):
        return 'char(%s)'%self.max_length

class User(models.Model):
    name = MyCharField(max_length=20)       使用自定义模型字段


xxx = models.ForeignKey(to='self')           # 自关联


模型字段约束：
name = models.CharField(max_length=20 )
max_length=20         长度
unique=True              唯一，ForeignKey(unique=True)  <==> OneToOneField()
db_index=True          将此字段定义为索引
null=True                  允许为空
to_field                     外键中，设置要关联的字段，不写默认是另一张表的主键字段
on_delete                  django2.x指定外键字段的级联更新
choices                     选择
db_constraint            ForeignKey中使用，是否在真实数据库中创建外键字段，默认True 

g_choices = (
	(1, '男')，
	(2, '女')
    )
gen = models.IntegerField(choices=g_choices)       choices参数使用, 数据库里存的是数字    
user = User.objects.filter(pk=1).first()
user.get__gen_display()                         取出使用get__字段名_display(), 没有对应则输出原本数字

数据库查询优化：django是惰性查询
only与defer
Book.objects.only('title')
Book.objects.defer('title')
defer与only相反，defer括号内放的字段不在查询处理的对象里面，查询该字段需要
重新走数据库，而如果查询的是非括号内的字段，则不需要走数据库。

select_related与prefetch_related：
跟跨表操作有关
Book.objects.select_related('只能是外键字段')         内部是连接查询，inner join，只能一对多，一对一
Book.objects.prefetch_related('只能是外键字段')     内部是子查询

select_reated内部直接先将两个表连起来，然后一次性将里面的所有数据全部封装给
查询出来的对象，也就是说不是惰性查询。
prefetch_related利用子查询一次性将里面的所有数据全部封装给
查询出来的对象。同上一样。

--------------------------------------------------------------------
解决并发问题，加锁：
悲观锁，查之前先上锁：select_for_update()，别的事物执行相同查询会阻塞
select * form user where   id=3  for  update
User.objects.select_for_update().get(id=uid)

乐观锁：
查询时不加锁，更新时做判断，跟查询的时候不一样则事物失败
update user set username='xxx' where xxx='xxx'            where条件判断是否被其他人修改过
num = User.objects.filter(id=sid，xxx='xxx').update(username='xxx')       返回受影响的行数：1更新或0未更新

---------------------------------------------------------------------------
测试环境test.py:
manage.py前几行导入
import os
import sys
if __name__ == '__main__':
    import django
    django.setup()


查询：
User.objects.filter(id=1) 

get()                             一条，没有会报错，少用
all()                              全部
filter()                          满足条件的
values()                       获取指定自动对应的数据，返回query对象，列表套字典
values_list()                  queryset，列表套元组
count()                         统计
first()                            第一个
last()                             最后一个
order_by()                     排序，负号降序
reverse()                        反转，前面必须排过序才生效
exclude()                     queryset，返回不满足条件的
distinct()                       去重相同两条记录，主键不要忘记，主键都是不同的
exists()                          判断是否有值，布尔值
create()                        添加，添加：User.objects.create(key=value)

User.objects.filter().order_by('-id')  结果排序,降序加减号
User.objects.filter().count()             计数

查询集queryset对象：惰性查询：实际使用才查询。缓存：第一次查询时缓存起来

查询条件：
判空：isnull

双下划线查询：
User.objects.filter(age__gt=3)  
xxx__gt                                           大于
xxx__gte                                         大于等于
xxx__lt
xxx__lte
xxx__in = [1,2,3]                             范围in
xxx__range                                    范围，a<100
xxx__contains                                包含，like
xxx__icontains                               包含，开头加 i，忽略大小写
xxx__endswith                               
xxx__startswith                              以xx开头
time__year                                    日期类字段，获取年
time__month                                月，day，...


外键字段增删改查：级联删除
一对多：
表_id = 1
表 = 表_obj 

外键字段保存时:
user = models.ForeignKey('UserModel', ......)
user传UserModel对象，user_id传具体数字id


多对多：
1、自动，只创建多对多自动，orm自动创建第三张表，可以使用add、remove、set、clear方法
2、手动，自己创建第三张表
3、半自动（***推荐***），如下，不能使用add、remove、set、clear方法
class User(models.Model):
    book = models.ManyToManyFiled(to='Book', through='Xxx', through_fields=('user', 'book'))     user在前，当前表    

class Book(models.Model):
  ......

第三张表
class Xxx(models.Model):
    user = models.ManyToManyFiled(to='User')             关联表, orm会自动将数据库字段改为: user_id
    book = models.ManyToManyFiled(to='Book')           
    

多对多能使用的方法：
add()
remove()        前两个括号内可以传数字或对象
set()               括号内传一个可迭代对象
clear()            清空对应关系数据

多表查询：
正反向概念：外键一方是正向
小提示：正向查询按外键字段，反向查询按表名小写

基于对象的跨表查询：子查询
user = User.objects.filter(pk=2)
user.xxx                   得到关联的表，可以user.xxx_字段
user.xxx.all()             得到多条，例如属于这个用户的评论
xxx.user_set.all()      反过来

基于双下划线的跨表查询：连表操作, 可以跨多张表
Book.objects.filter(pk=2).values('title', 'publist__name')     publist__name是关联的表的字段
Publish.objects.filter(book__id=2).values('book__title', 'name')    filter里面的 表名__id


查看orm内部sql语句：
1、queryset对象.query
2、配置文件中日志相关代码

聚合函数：aggregate
跟数据库相关的模块基本都是django.db.modeles或django.db里面
聚合函数通常都跟分组一起使用
需导入
from django.db.models import Sum，Count, Avg, Max, Min
Book.objects.aggregate(Max('xxx'), Avg('age'))

分组查询：annotate
Book.objects.annotate()                          默认按前面Book分组
Book.objects.values('类型').annotate()     按照“类型”分组
Book.objects.annotate(分组别名=Count('外键字段')).values('title', '分组别名')        Count的统计，Max, ....
分组报错的可能原因：数据库设置了严格模式

F与Q查询：
F对象：类属性之间的比较，能够直接获取到表中某个字段对应的数据
Book.objects.filter(xxx__gt=F('表字段'))
Book.objects.update(price=F('price') + 10)     将所有price字段的值加10     
Book.objects.updae(title=Concat(F('titel'), Value('张三')))     字符的拼接需要导入：django.db.models.functions.Concat,   django.db.models.Value

Q对象：与、或、非、的操作
Book.objects.filter(Q(pk=1), Q(pk=5))         中间逗号是and操作
Book.objects.filter(Q(pk=1) | Q(pk=5))        中间 | 是or操作
Book.objects.filter(~Q(pk=1) | Q(pk=5))      前面~号，取反

Q高阶：
q = Q()
q.connector = 'or'                              默认and，改为or
q.children.append(('price__gt', 100))
q.children.append(('price__lt', 300))
Book.objects.filter(q)                        直接在filter里放q对象

user = User()
user.save()               保存
user.delect()            删除
user = User.objects.filter(pk=1).update(name='张三')      更新（推荐）

只要orm语句返回一个queryset对象，则它后面可以继续使用queryset对象封装的方法：filter，get, values, ...

批量插入数据：
先把对象放入列表，再一次性插入
user_list = [ ]
for i in range(10000):
    user = User(name='%s'%i)
    user_list.append(user)
User.objects.bulk_create(user_list)               批量插入
---------------------------------------------------------------------------------------------

视图：
正则起名：(?P<num\d+>)
request.POST.get()
request.GET.get()
request.GET.getlist()          前端多个参数时
request.path                     请求完整路径
request.is_ajax()                判断是否ajax请求，json格式数据在request.body, 而且是二进制格式，需要decode('utf-8')解码，json.loads()直接可以转换
request.method
request.FILES                    文件

上传文件：
必须post请求
f = request.FILES[]     获取文件对象，小于2.5M放在内存中，大于则写入临时文件
f.name   名字
f.size
f.read()  读入内存
f.chunks()    返回生成器，使用for循环不断写入文件就行了
路径保存到数据库

ajax默认是异步请求
ajax里面加'async': false可以为同步
dataType：预期返回的数据类型

django序列化：
from django.core import serializers
user = User.objects.all()
res = searializers.serialize('json', users)           将查询集序列化成json格式数据，需要导入
return HttpResponse(res)

---------------------------------------------------------------------------------------------
前后端传输数据编码格式：contentType
1、urlencoded                  user=aa&pass=123
2、formdata                     form表单不能发送json格式数据
3、json

----------------------------------------------------------------------------------------------
模板：
模板变量：数字、字母、下划线、点组成，不能以下划线开头
解析顺序：
{{ user.name }} 字典---属性----对象
{{ user.0 }} 字典----列表

{{ forloop.counter }} 显示循环到第几次
{% if a > b %}  比较操作符两边必须有空格
过滤器：
{{ user.usename | 过滤器 }}
date：'Y年-m月-d日'  格式化日期
length  长度
default  默认值，管道前为False时使用
---------------------------------------------------------------------
自定义过滤器：
在应用app目录下新建python包：名字必须是templatetags
使用时先加载：{% load 过滤器模块名 %}      # py文件
导入：
from django.template import Library

register = Library()

@register.filter(name='过滤器名字，没有则用函数名')
def xxx(num)  最多两个参数，最少一个
    return num%2 == 0
---------------------------------------------------------------------
多行注释：
{% comment %}
{% endcomment %}

模板继承：
{% extends 'base.html' %}  相对于模板目录template

{% block a %}
    {{ block.super }}  保留父模块内容
    内容
{% endblock a %}

html转义：
关闭转义过滤器：safe
{% autoescape %}
{% endautoescape %}

csrf只针对post请求

反向解析：
动态生成url地址
应用url：namespace=xxx
视图url：name=xxx
前端：{% url 'xx：xx'  参数=  参数= %}
View：redirect(reverse('xxx : xxx'， arsg=(参数)， kwargs={'xx': xx}))

动态加载静态文件：
{% load staticfiles %}
{% static '/images/aa.png' %}  相当于 /static/images/aa.png
--------------------------------------------------------------------------------------------
中间件：
干预请求和响应的过程

身份验证黑白名单
请求频率限制

自定义中间件：
from django.utils.deprecation import MiddlewareMixin  # 自定义中间件要继承的父类
1、在应用或项目下新建文件夹，下面新建middleware.py（一般是这个名字）
2、创建类：Xxx(MiddlewareMixin)                                         # 继承MiddlewareMixin
3、固定的方法名，用几个定义几个：
    __init__(self):                                                                       # 服务器启动后第一个请求调用，只一次

    process_request(self, request):                                           # 每次请求来时第一个调用，return则直接返回

    process_response(self, request, response):                         # 调用视图后，返回浏览器之前调用
             return response                                             
           
    process_view(self, request, view_func, *args, **kwargs)      # 路由匹配成功后，执行视图函数前调用

    process_template_response(self, request, response):          # 视图函数后， 返回的HttpResponse对象有render属性时才会触发，从下到上
    
    process_exception(self, request, exception):                       # 视图函数出现异常时调用，***调用顺序按照注册从下往上
4、在setting.py注册："应用.xxx.middleware.xxx类"，执行顺序从上到下

request.META['REMOTE_ADDR']                     获取请求的ip地址

当process_request返回HttpResponse对象之后会直接走同级别的process_response，而不会将所有的process_response都走一遍。
flask框架则是，只要产生响应就全部走一遍

----------------------------------------------------------------------------------------------
全文检索：
1、安装
pip install django-haystack     全文检索框架，支持whoosh、solr、Xaplan、Elasticsearc四种全文检索引擎
pip install whoosh                  搜索引擎，python实现，性能较低，稳定
pip install jieba                       中文分词工具

2、在settings注册，配置
INSTALLED_APPS = [
    ...
    'haystack',                   # 全文检索框架
    ...
]

# 全文检索框架配置
HAYSTACK_CONNECTIONS = {
    'default': {
        'ENGINE': 'haystack.backends.whoosh_backend.WhooshEngine',  # 搜索引擎
        'PATH': os.path.join(BASE_DIR, 'whoosh_index'),  # 索引文件路径
    }
}
# 数据变动时自动生成索引
HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'

# 默认每页条目
HAYSTACK_SEARCH_RESULTS_PER_PAGE = 8

3、在要检索的app下面，创建固定名字search_indexes.py文件：
from haystack import indexes
from apps.movie_app.models import MovieModel  # 导入模型类


class MovieModelIndex(indexes.SearchIndex, indexes.Indexable):
    """指定对某个模型类的哪些数据建立索引"""
    # 索引字段，use_template指定根据表中哪些字段建立索引文件，说明放在一个文件中
    text = indexes.CharField(document=True, use_template=True)

    def get_model(self):
        """实现抽象方法"""
        # 返回模型类
        return MovieModel

    def index_queryset(self, using=None):
        """实现抽象方法，建立索引的数据"""
        return self.get_model().objects.all()

4、在templates下创建search/indexes下创建模型对应的应用的文件夹下创建 "模型类小写_text.txt"，固定格式
templates/search/indexes/movie_app/moviemodel_text.txt
内容：
# 根据表中字段建立索引
{{ object.title }}  # 根据电影标题建立索引
{{ object.detail }}  # 根据电影详情建立索引

4、在项目目录下建立索引
命令：python manage.py rebuild_index
完成后会在项目目录下whoosh_index目录下生成索引文件

使用全文检索:
前端搜索表单固定get请求， input搜索框name固定为：name="q"
主urls.py
urlpatterns = [
    ...
    path('movies/search/', include('haystack.urls')),  # 全文检索，地址为form表单的action
    ...
]
搜索结果会传递给search/search.html, 需要提前创建，需要手动渲染
{{ query }}  搜索的关键字
{{ page }}   当前页对象，遍历获取SearchResult类的实例对象，实例对象的属性object是模型类

{% for item in page %}
    <div>{{ item.object.title }}</div>             遍历拿到数据信息
{% endfor %}

{{ paginator }}  分页对象


更改whoosh默认分词方式：jieba
1、env虚拟环境/Lib/site-packages/haystack/backends/目录或其它目录下新建py文件：chinese_analyzer.py，名字随意
import jieba
from whoosh.analysis import Tokenizer, Token


class ChineseTokenizer(Tokenizer):
    def __call__(self, value, positions=False, chars=False,
                 keeporiginal=False, removestops=True,
                 start_pos=0, start_char=0, mode='', **kwargs):
        t = Token(positions, chars, removestops=removestops, mode=mode, **kwargs)
        # 通过 jieba对字符串进行切分
        seglist = jieba.cut(value, cut_all=True)
        for w in seglist:
            t.original = t.text = w
            t.boost = 1.0
            if positions:
                t.pos = start_pos + value.find(w)
            if chars:
                t.startchar = start_char + value.find(w)
                t.endchar = start_char + value.find(w) + len(w)
            yield t


def chinese_analyzer():
    return ChineseTokenizer()

2、拷贝一份whoosh_backend.py命名whoosh_cn_backend.py（名字随意）, 在env虚拟环境/Lib/site-packages/haystack/backends/下
导入刚刚创建的分词器
from xxx.chinese_analyzer import chinese_analyzer  # 导入自定义分词器
替换原有分析器
# analyzer=field_class.analyzer or StemmingAnalyzer()，旧
analyzer=field_class.analyzer or chinese_analyzer(),  # 新

3、在settings替换原有引擎
'ENGINE': 'xxx.whoosh_cn_backend.WhooshEngine',   # 使用自定义whoosh_cn_backend

4、重建索引
python manage.py rebuild_index

--------------------------------------------------------------------------------------------

csrf跨站请求伪造：
{{% csrf_token %}}              给每一个表单提交页面，提供一个唯一标识
ajax方式：
1、data: {'csrfmiddlewaretoken': $('[name=csrfmiddlewaretoken]').val()}
2、data: {'csrfmiddlewaretoken': {{ csrf_token }}}
3、django官方提供的js代码

csrf装饰器：
只需某些表单需要校验的时候用
from django.views.decorators.csrf import csrf_protect, csrf_exemp
csrf_protect        需要校验
csrf_exemp         忽略校验, 在CBV中只对dispatch生效
FBV：装饰在视图函数上

CBV:   method_decorator(csrf_protect)                        装饰在方法
          method_decorator(csrf_protect， 'post')            装饰在类。 或者参数传method_decorator(csrf_exemp， 'dispatch')
         @method_decorator(csrf_protect)                      装饰在dispatch
         def dispatch(self, request, *args, **kwargs):           
             return super(Login, self).dispatch(request, *args, **kwargs)

--------------------------------------------------------------------------------------------
后台管理：
1、本地修改时区、语言
2、创建超级用户  python manage.py createsuperuser
3、注册模型
4、自定义管理页面：自定义模型管理类

上传文件：
setting设置上传路径
模型字段使用：ImageField(upload_to='保存的文件夹')
迁移生成表
后台管理注册模型
-------------------------------------------------------------------------------------------
分页：
自定义分页器
公式：开始=（页码-1），结束=页码*每页条数，即：limit page-1, page*num；
确定前端展示多少个页码：for i in range(当前页-5， 当前页+6), 处理小于6的
user = User.objects.all()[start: end]                 # 切片返回，惰性查询

内置分页器：
pag = Pageintor(查询集， 每页条数)
pag.page(1)                             某页内容
pag.num_pages()                     总页数
pag.number                            当前页码
pag.object_list                         查询集

----------------------------------------------------------------------------------------
重定向：
redirect ：  HttpResponseRedirect的快捷方式
HttpResponseRedirect： 

以下是重定向的几种方式
return redirect('/')
return HttpResponseRedirect('/')

return redirect('user:index')                # 反向解析
return redirect(reverse('user:index'))   # 反向解析+reverse，有参数时使用
return HttpResponseRedirect(reverse('user:index'))     # 注意：这里使用反向必须加reverse不然报错
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

9、原生sql查询data =  User.objects.raw("select * from 表名 where 条件")       可以执行任何sql语句，与user无关
防止sql注入，不要使用format，应该使用%s：sql = "select * from user where username=%s"      user.objects.raw(sql,[username, nane, djf])  列表里面放参数。
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

cookie与session：		
cookie：服务端保存在客户端（浏览器）上的信息都可以称为cookie，k，v键值对，不太安全
session：保存在服务端，session基于cookie工作，量大的话，服务器压力大
token：登录成功，将用户信息加密，结果拼接再信息后面，返回给客户端，客户端每次访问
              带着该信息，服务端拿到后切去前面部分，然后对比。jwt认证               
			
保存登录状态三连：
1、设置（cookie，session）
2、获取（cookie，session）
3、删除（cookie，session）

设置cookie
要先实例一个响应对象，HttpResponse, render,  redirect
res = redirect('/')
cookies_time = datetime.datetime.now() + datetime.timedelta(hours=3)
res.set_cookie('username', user.username, max_age=秒，expires=秒)     # 设置cookie，过期时间max_age，expires针对ie浏览器
res.delete_cookie('username')                  # 删除，也需要响应对象
return res
request.COOKIES.get('username')            # 获取cookie

设置session：
依赖于cookies，存入什么类型，取出来就是什么类型
request.session['username'] = user.username             # 设置session
request.session.get('username')                                  # 获取session
request.session.has_key()                                            # 判断是否有值

删除session
request.session.delete()                     # 删除当前会话，只删除服务的
request.session.clear()                       #清除所有session值部分，不清除sessionid
request.session.flush()                       # 清除所有session键值对，连数据库里面的也清除（推荐）
del request.session['username']         # 清除指定session键值对

request.session.set_expiry(秒)            # 设置过期时间：秒，日期对象，0，不写默认14天
0：关闭浏览器过期

django操作session需要默认的一张表django_session, 迁移自动生成，存储键，值，过期时间（默认14天）
设置session内部：
1、生成一个随机字符串
2、自动将随机字符串和对应数据存储到django_session表中
     2.1先在内存中产生操作数据的缓存
     2.2在响应结果django中间件的时候才真正操作数据库
3、将产生的随机字符串返回给客户端保存：sessionid：随机字符串

django_session表的数据，一个浏览器只对应一条，设置了多个session值会放在request.session对象

session可以存在数据库、文件、redis、内存

自定义装饰器验证用户登录认证（FBV）
def login_auth(func):
    def inner(request, *args, **kwargs):
        if 登录：
            return func(request, *args, **kwargs)
        else：
            return redirect('/login/?next=%s'%request.get_full_path())          # 传入用户来时的地址，登录成功后跳转回去，login函数获取next值
    return inner

CBV添加装饰器
form django.utils.decorators import method_decorator

@method_decorator(login_auth, 'get')                         # 方式1 针对类，可以叠加多个
@method_decorator(login_auth, 'post')
class Login(View):
    @method_decorator(login_auth)    
    def dispatch(self, request, *args, **kwargs):            # 方式2 对这个方法装饰，会作用与当前类里面的所有方法
        return super(Login, self).dispatch(request, *args, **kwargs)

    @method_decorator(login_auth)                             # 方式3 针对方法
    def get(self, request):
        pass 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
 自定义数据库   settings.py
 DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'databasenane',  # 数据库名字
        'USER': 'root',  # 用户名
        'PASSWORD': 'mysql',  # 密码
        'HOST': '127.0.0.1',  # 数据库地址 
        'PORT': 3306,  # 端口号
    }
}
 ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
 django图像验证码
 
1、 pip install  django-simple-captcha
 
 settings.py:
2、添加captcha到INSTALLED_APPS，settings.py
3、生成迁移：python manage.py migrate

 4、# 图像验证码配置
CAPTCHA_FONT_SIZE = 22  # 字体大小（默认22）
CAPTCHA_IMAGE_SIZE = (80, 30)  # 图片大小（宽高）
CAPTCHA_TIMEOUT = 1  # 每一分钟生成一个验证码
CAPTCHA_LENGTH = 4  # 验证码上面的字符个数
CAPTCHA_OUTPUT_FORMAT = u'%(image)s %(hidden_field)s %(text_field)s'  # 输出格式
CAPTCHA_NOISE_FUNCTIONS = ('captcha.helpers.noise_arcs',  # 弧线
                           'captcha.helpers.noise_dots',  #
                            'captcha.helpers.noise_null',  # 无
                           )   # 干扰的东西
CAPTCHA_CHALLENGE_FUNCT = 'captcha.helpers.random_char_challenge'  # 随机字符串

5、根路由：path('captcha/', include('captcha.urls'))

6、app路由
    # 验证码
    path('cap/', views.cap, name='cap'),
	
7、views.py下
导入：from app.form import CaptchaTestForm
# 验证码
def cap(request):
	if request.method == 'POST':
		form = CaptchaTestForm(request.POST)
		if form.is_valid():
			print('验证通过')
		else:
			print("输入错误")
	form = CaptchaTestForm()
	return render(request, 'app/yam.html', locals())
	
	
8、在app下新建form.py
from django import forms
from captcha.fields import CaptchaField

class CaptchaTestForm(forms.Form):
    captcha = CaptchaField()  # 验证码字段
	
9、
返回到表单
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>验证码</title>
</head>
<body>
<h1>验证码</h1>
<form action="{% url 'app:cap' %}" method="post">
    {% csrf_token %}
    {{ form.captcha }}
    <input type="submit">

</form>


</body>
</html>
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

form组件表单验证：
from django import forms

1、创建表单类
form.py文件
class RegisterForm(forms.Form):       # 最大长度      # 不能为空       # 提示的错误信息
    username = forms.CharField(max_length=15, required=True, error_messages={
        'required': '用户名不能为空',
        'max_length': '用户名长度不能超过15个字符'
    })

    password = forms.CharField(min_length=3, required=True, error_messages={
        'required': '密码不能为空',
        'min_length': '密码长度不能少于三个字符'
    })

    email = forms.EmailField(......error_messages{'invalid': '邮箱格式错误' })               # 邮件字段

    gender = forms.ChoiceField(                                                                             # 选择字段，redio
                                         choices=((1, '男')，(2, '女'))，
                                         label='性别',
                                         initial=1,
                                         widget=forms.widgets.RadioSelect()                              # 多选， Select()则是单选
                           )

form的钩子函数（hook）：
自定义校验规则，方法
1、局部钩子：给单个字段
def clean_username(self):
    username = self.cleaned_data.get('username')
    if 'xxx' in username:
        self.add_error(filed='username', message='错误提示信息')
    return username

2、全局钩子：给多个字段
def clean(self):
    p1 = self.cleaned_data.get('p1')
    p2 = self.cleaned_data.get('p2')
    if p1 != p2 :
        self.add_error(filed='p2', message='两次密码不一致')      # 或者主动抛出异常：raise ValidationError('两次密码不一致')
    return self.cleaned_data

参数：
max_length         最大长度
required              默认必填
min_length          最小长度
label                    前端label，默认展示form类字段首字母大写形式
error_mesages     字段，错误提示信息
initial                   前端input标签默认值
widget=forms.widgets.TextInput(attrs={'class': 'c1 c2'})          控制表单字段 input 标签类型, 内部控制css选择器
validators=[RegexValidator(r'[0-9]')， '错误提示信息']                正则校验，from django.core.exceptions import RegexValidator

	
2、在视图调用表单类
form = RegisterForm(request.POST)            # 传字典进去，只验证RegisterForm类中有的字段, 可以保留上次表单记录
if form.is_valid():
    form.cleaned_data                                  # 查看通过的字段
else:
    form.errors                                             # 查看不通过的条件和原因
    return render(request, 'register.html', {'form': form})     # 验证不成功将错误信息返回，渲染到页面


3、html页面渲染
<form action="" method="post" novalidate>       # novalidate表示不校验表单字段，如email

<span>{{ form.字段名.errors.0 }}</span>         渲染错误信息, 列表形式

直接渲染表单
{{ form.as_p }}                       
{{ form.as_ul }}
{{ form.as_table }}

{{ form.字段.label }}{{ form.字段 }}    等价于   Username<input>

推荐渲染方式：
{% for f in form %}
    <p>{{ f.label }}{{ f }}</p>
{% endfor %}


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

django内置用户认证：
Auth模块
auth_user表，密码用sha256加密
在views导入：from django.contrib import auth

创建用户，密码自动签名（加密）
user = User.objects.create_user(username=username, password=password)
admin = User.objects.create_superuser(username=username, password=password, email='aaa@163')   # 创建超级用户，邮箱必填

验证密码：
正确返回user对象，错误返回None
user = auth.authenticate(request, username=username, password=password)         # 验证，必须同时传入用户名跟密码
if user：
    user.username
    auth.login(request, user)                   # 保存登录状态，等价：request.session[key] = user

在任何地方都能使用request.user获取登录的对象，没登陆则得到AnonymousUser匿名用户

request.user.is_authenticated()                                      # 判断用户是否登录

if request.user.cheak_password(passwd)：                     # 自动加密对比密码，返回布尔值
             request.user.set_password(new_password)        # 修改密码
              request.user.save()                                           # 保存修改

权限认证：
from django.contrib.auth.decorators import login_required         # 路由保护装饰器，登录后才能访问

@login_required(login_url='user:login')              # 未登录，跳转到指定url                                     
def xxx(request):

全局配置：
LOGIN_URL = '/login/'                                        # 未登录，跳转到指定url     

局部和全局都有，则跳转局部定义的   


退出登录，注销
auth.logout(request)


扩展auth_user表
1、
settings.py
AUTH_USER_MODEL = '应用字.User'

2、
from django.contrib.auth.models import AbstractUser
class User(AbstractUser):
        # 只添加额外的字段就行，原本有的建议不要覆盖

扩展前不能执行迁移，不然会生成auth_user表，模型里继承AbstractUser抽象类
执行迁移时将不会不会生成auth_user表

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

django后台管理
创建超级用户：python manage.py createsuperuser

# 配置后台页面和添加数据的展示
class UserAdmin(admin.ModelAdmin):
		pass

在app下的admin.py 
# 注册（在后台显示表，然后可以修改表数据）
admin.site.register(User, UserAdmin)
admin.site.register(Data, DataAdmin)
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
settings.py
配置用户上传文件存储的位置
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')         # 用户上传的所有文件都会放在这个文件夹下面，自动创建media文件夹，不影响数据库的路径

配置暴露后端指定文件夹资源，使在浏览器输入url能直接访问，如图片资源：
在urls.py下
from django.views.static import serve
from 项目 import settings
xxxx = [
    url('^media/(?P<path>.*)', serve, {'doument_root': settings.MEDIA_ROOT})        # 明确要暴露的资源
]


----------------------------------------------------------------------------------------------------
图片防盗：
简单防盗：请求图片的时候判断是否是从本网站，请求头里的Referer参数
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		
django缓存，适用于页面经常被访问，但页面数据不会经常改变的地方

settings配置，二选一
1、
# 数据库缓存配置，然后python manage.py createcachetable生成缓存表
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
        # 缓存表的名字
        'LOCATION': 'my_cache_table'
    }
}

2、
# redis做缓存，session缓存
安装：pip install django-redis
配置
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://192.168.1.101:6379/2',  # redis地址（无密码），后面表示使用第二个数据库
        # 'LOCATION': 'redis://密码@IP:端口号/2',  # redis地址（有密码），后面表示使用第二个数据库
    }
}

redis缓存session：
1、
2、settings.py配置
    

from django.views.decorators.cache import cache_page 
# 页面缓存

# 缓存装饰器，后面为时间（秒）
@cache_page(1)
def index(request):


局部缓存，在HTML页面先加载缓存
{% load cache %}

                时间（秒）   名字是key值（取缓存的时候，需要根据key值取）
{% cache        2           'my' %}
     <h2>{{ my_time2 }}</h2>
{% endcache %}


手动设置缓存，将数据库里的数据读出来保存到缓存里，下次请求来的时候先在缓存里面查找，没有则到数据库查
from django.core.cache import cache  # 手动设置缓存，导入底层的缓存
	
# 手动设置缓存（数据库）
def my_cache(request):
    # 首先在缓存表里查数据
    my_data = cache.get('all_data')
	
    # 缓存表里没有再到数据库里查并将数据放入缓存表里
    if not my_data:
        my_data = Data.objects.all()
		
        # cache可以直接把查询结果序列化,保存到缓存表里
        cache.set('all_data', my_data, 20)  # cache.set(key, value, timeout(秒))
    return render(request, 'cache.html', locals())
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		
邮箱验证激活账号

1、token加密
from itsdangerous import URLSafeTimedSerializer as utsr
import base64
from django.conf import settings as django_settings

 路由需要传token值：path('active/<token>/', views.emial_active, name='active'),

# 产生token
class Token:
    def __init__(self, security_key):
        self.security_key = security_key
        self.salt = base64.encodebytes(security_key.encode('utf-8'))
    # 生成token（加密）
    def generate_validate_token(self, uid):
        serializer = utsr(self.security_key)
        return serializer.dumps(uid, self.salt)
    # 解密
    def confirm_validte_token(self, token, expriation=3600):
        serializer = utsr(self.security_key)
        return serializer.loads(token, salt=self.salt, max_age=expriation)
    # 移除
    def remove_validate_token(self, token):
        serializer = utsr(self.security_key)
        print(serializer.loads(token, salt=self.salt))
        return serializer.loads(token, salt=self.salt)

# 定义为全局对象， SECRET_KEY是settings.py里面的
token_confirm = Token(django_settings.SECRET_KEY)

2、发送激活邮件
	# 邮箱验证激活账号开始
            # 如果数据库里有用户，则发送邮件激活账号
            if user:
                # 生成加密token
                token = token_confirm.generate_validate_token(user.uid)

                # 构造激活url
                url = 'http://' + request.get_host() + reverse('user:active', kwargs={'token': token})

                # 渲染html模板
                html = loader.get_template('active.html').render({'url': url})

                # 发送邮件
                send_mail('账号激活', '', '1251779123@qq.com', [request.POST.get('emial')], html_message=html)

                return HttpResponse('邮件已发送，请登录邮箱点击激活账号')
# 结束
	
邮件模板
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>激活账号</title>
</head>
<body>
<a href="{{ url }}">点击激活账号</a>
</body>
</html>


3、激活处理
# 邮箱验证激活账号
def emial_active(request, token):
    try:
        uid = token_confirm.confirm_validte_token(token)   # 解密token，将uid取出来
    except:
        uid = token_confirm.remove_validate_token(token)  # 解密出错则删除token
        user = User.objects.get(pk=uid)  # 连账号也删除，让用户重新注册
        user.delete()
        return HttpResponse('激活失败，重新注册')
    try:
        user = User.objects.get(pk=uid)
    except:
        return HttpResponse('用户不存在，重新注册')

    # 激活
    user.is_active = 1
    user.save()
    return HttpResponse('激活成功')

	
邮箱验证激活二
1、导入
from django.core.mail import send_mail          # 发送邮件
from itsdangerous import TimedJSONWebSignatureSerializer          # 生成token
from itsdangerous import SignatureExpired            # token超时发生的异常
2、
serializer = TimedJSONWebSignatureSerializer(SECRET_KEY, 3600)               # 实例化，超时时间3600秒
info = {'uid': user.uid}            # 要加密的字典（最好是能唯一标识的）
token = serializer.dumps(info)           # 加密，生成token
token = token.decode('utf-8')       #  生成的token默认是byte类型，需要解码

# HTML模板
 html = '<h1>%s,欢迎你注册</h1> 点击下面链接激活账号<br> <a href="http://127.0.0.1:8000/active/%s">http://127.0.0.1:8000/active/%s</a">' % (username, token, token)
# 发送邮件
send_mail('账号激活', '内容（空）', '寄件人', ['收件人列表'], html_message=html)
	
 # 邮箱激活账号路由，要接受token参数
 path('active/<token>/', views.emial_active, name='active'),

 解密
    try:
        # uid = token_confirm.confirm_validte_token(token)   # 方法一，解密token，将uid取出来
        serializer = TimedJSONWebSignatureSerializer(SECRET_KEY, 3600)  # 方法二
        info = serializer.loads(token)  # 解密，加密的时候是字典，解密的时候还是字典
        uid = info.get('uid')
    except SignatureExpired as e:   # token过期的错误SignatureExpired
        user = User.objects.get(pk=uid)  # 连账号也删除，让用户重新注册
        user.delete()
        return HttpResponse('激活链接过期，请重新注册')
		
	 # 不出错则激活
    user.is_active = 1
    user.save()
    return redirect(reverse('user:login'))  # 激活成功，重定向到登录页面

-----------------------------------------------------------------------------------------------------
XSS攻击：
在富文本框书写js代码，导致页面被修改。
解决：使用bs4模块，把<script>标签删除，或者<>替换&lt;
pip install beautifulsoup4
	
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
celery异步：
1、任务发出者（发邮件） 
2、任务队列（redis）
3、任务处理者（worker）

1、
安装：pip install celery

在项目根文件夹下创建celery包（名字随意），在下面创建tasks.py 文件，输入下面代码
from celery import Celery
from django.core.mail import send_mail  # 发送邮件
from U.settings import EMAIL_FROM  # 服务器发送邮件的邮箱


# 如果任务处理者（worker）在另一台电脑启动则需要把整个项目代码复制一份过去，而且要在worker加上下面四句，为了加载配置
# import os
# os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'U.settings')
# import django
# django.setup()

# 创建Celery类实例对象
# main一般为tasks的路径                   中间人redis地址，使用6号数据库
app = Celery(main='celery_tasks_tasks', broker='redis://127.0.0.1/6')

# 定义任务函数，发送注册激活邮件
@app.task
def send_register_active_emial(to_emial, username, token):
    '''发送激活邮件
    to_emial: 发给谁
    username: 用户名
    token: token值
    '''
    # 组织邮件信息
    html = '<h1>%s,欢迎你注册</h1> 点击下面链接激活账号<br> <a href="http://127.0.0.1:8000/active/%s">http://127.0.0.1:8000/active/%s</a">' % (
    username, token, token)

    # 发送邮件
    send_mail('账号激活','', EMAIL_FROM, [to_emial], html_message=html)
		
视图里面发送邮件：send_register_active_emial.delay(request.POST.get('emial'), username, token)

2、
处理者（worker）也要一分项目代码，代码看上面注释
	
启动worker（任务处理者）不同电脑或同一台电脑： 在项目目录下：celery -A celery包名.py文件名  worker  -l  日志等级（info）
在windows下要安装：pip install eventlet, 启动：celery -A celery_tasks.tasks worker -l info -P eventlet
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
django允许跨域的处理, 在settings下配置
1、pip install django-cors-headers

2、INSTALLED_APPS = [
    # 跨域的解决
    'corsheaders',
]

3、MIDDLEWARE = [
    # 跨域的解决
    'corsheaders.middleware.CorsMiddleware',   # 放在前面
	......
]

4、
# 处理跨域请求
CORS_ALLOW_CREDENTIALS = True  # 允许将cookie包含在跨站点HTTP请求中。默认为False。
# 以下两个二选一就行
# 1、CORS_ORIGIN_ALLOW_ALL = True  # 为True表示允许所有主机，将不使用白名单, 默认为False

# 2、跨域请求白名单(可以跨域请求的主机或域名)
CORS_ORIGIN_WHITELIST = [  
    # 'https://sub.example.com',  # URI方案+主机名+端口，或特殊值'null'或 'file：//'之一。默认端口（HTTPS = 443，HTTP = 80）在此处是可选的。
    'http://localhost',
    'http://127.0.0.1:8000',
]

CORS_ALLOW_METHODS = [       # 允许的请求方式
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]
CORS_ALLOW_HEADERS = [  # 请求时可以使用的非标准HTTP标头的列表,以下是默认的
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]
-------------------------------------------------------------------------------------------------------------------------------------------------------------
上线部署
1、pip install uwsgi

2、uwsgi.ini
	[uwsgi]
	# 使用nginx连接时使用
	socket = 127.0.0.1:8000
	# 项目目录
	chdir = /home/byc/blog/blog/
	# 项目中wsgi.py文件的目录，相对于项目目录
	wsgi-file = blog/wsgi.py
	module = blog.wsgi
	# 进程数
	processes = 4
	# 线程数
	threads = 2
	master = true
	# 保存启动后端进程pid，方便关闭
	pidfile = uwsgi.pid
	# 设置uwsgi后台运行，保存日志信息
	# daemonize = uwsgi.log

3、配置nginx.conf
	第一行改为： user  root;  # 权限设置
	server {
		listen 80;
		server_name 47.112.208.199;    # 公网ip或域名：www.byc.ink
		
		location / {
			include uwsgi_params;   # 请求的参数
			uwsgi_pass 127.0.0.1:8000;   # 请求转发给服务器，必须跟uwsgi.ini 的socket一样
		}
		
		# 静态文件的目录，可以在其它地方
		location /static {
			alias /home/byc/blog/blog/static/;    
		}
	}

-------------------------------------------------------------------------------------------------------
配置负载均衡：
1、复制两份django项目代码，配置两个不同的端口，分别启动两个uwsgi服务器
2、# 负载均衡，名字自定义，服务器地址端口
	upstream blog {
	    server 127.0.0.1:8000;
	    server 127.0.0.1:8001;
	    ......
	}
3、location / {
	include uwsgi_params;  # 前端请求的参数
	uwsgi_pass blog； # 请求转发，去配置的服务器选择一个


完整配置：
配置nginx.conf
	第一行改为： user  root;  # 权限设置

	# 负载均衡
	upstream blog {
	    server 127.0.0.1:8080;
	    server 127.0.0.1:8081;
	}

	server {
		listen 80;
		server_name 47.112.208.199;    # 服务器的域名或IP
		
		# location = /  精确匹配
		location / {
			include uwsgi_params;
			uwsgi_pass blog； # 请求转发，选择一个服务器
		}
		location /static {
			alias /home/byc/blog/blog/static/;    # 静态文件
		}
	}











	
	
	