前后端分离架构：前端：app，小程序什么的。后端：mv（视图，模型）

api：
1、接口名字
2、描述
3、请求方法   get....
4、url    
5、请求参数
6、返回值

-----------------------------------------------------------------------------------------------------------------------
Flask-RESTful

1、pip install flask-restful

2、 在exts的__init__.py下，创建api对象
from flask_restful import Api  # restful api

# restful api  需要在apps下的__init__初始化
api = Api()

3、在apps的__init__.py下，初始化api
from exts import api

api.init_app(app=app)

4、在视图下
from flask_restful import Resource, fields, marshal_with
from exts import api

# 创建蓝图
restful_bp = Blueprint('restful', __name__, url_prefix='/api')

# 用户表的字段，需跟数据库字段名一致
user_fields = {
    'username': fields.String,
}

# 类视图
class RestfulResource(Resource):
    @marshal_with(user_fields)   # 将返回的数据序列化
    def get(self):
        '''查询'''
        users = User.query.all()
        return users

    def post(self):
        '''增加'''
        return 'post'

    def put(self):
        '''更改'''
        return 'put'

    def delete(self):
        '''删除'''
        return 'deletd'

# api资源（类视图，路径），必须添加，不然访问不到
api.add_resource(RestfulResource, '/rest')

5、前端或postman访问，指定不同请求方式返回不同结果
127.0.0.1：8000/rest
------------------------------------------------------------------------------------------------------------------------
请求解析器reqparse       参考：https://flask-restful.readthedocs.io/en/latest/reqparse.html
from flask_restful import reqparse
from werkzeug.datastructures import FileStorage  # 表单接收图片

# 请求解析，就是表单验证
parser = reqparse.RequestParser(bundle_errors=True)  # bundle_errors=True，会将所有验证不通过的message返回

#                     表单的name            类型         必填         错误返回的信息    只要form表单提交的数据
parser.add_argument(name='username', type=str, required=True, help='用户名', location=['form'])
parser.add_argument(name='password', type=str, required=True, help='密码')

parser.add_argument(name='phone', type=inputs.regex(r'^1[8]\d{9}$'), required=True, help='手机号')  # 使用正则
parser.add_argument('hobby', action='append')  # 接收多个参数，列表形式：['旅游', '打球']
parser.add_argument('icon', type=FileStorage, location='files')  # 接收图片,FileStorage类型

# 类视图
class UsersResource(Resource):
       def post(self):
        '''增加'''
        # 获取经过parser验证的数据
        args = parser.parse_args()
        username = args.get('username')
        password = args.get('password')
        phone = args.get('phone')
        hobby = args.get('hobby')

        # 接收图片并保存
        icon = args.get('icon')
        if icon:
            icon.save(os.path.join(settings.UPLOAD_ICON_DIR, icon.filename))  # 图片保存，里面填路径
        
        return jsonify(username, password, phone, hobby)

-------------------------------------------------
接收图片
from flask_restful import Resource, reqparse

parser = reqparse.RequestParser()

class UsersResource(Resource):
    def post(self):
        '''增加'''
        # 获取post提交数据
        args = parser.parse_args()
       
        return 'ok'
---------------------------------------------------------------------------------------------------------------------
自定义fields的value值，必须继承fields.Raw,必须重写format方法
class isDelete(fields.Raw):
    def format(self, value):
        return '删除' if value else '未删除'

user_fields = {
  .....
    'is_delete': isDelete,  # 使用自定义的fields
}
--------------------------------------------------------------------------------------------------------------------------------
fields.Url，主要参数endpoint

# 使用Url，产生一个链接，点击进入详情，相当于在user_fields前面加了一层
user_fields1 = {
    'username': fields.String,
    'uri': fields.Url(endpoint='single_user', absolute=True),  # endpoint为api的endpoint
}

# 用户表的字段，需跟数据库字段名一致,序列化json返回给前端（get），key默认为模型字段名
user_fields = {
    'id': fields.Integer,

    # 'username': fields.String,
    'name': fields.String(attribute='username', default='匿名'),  # attribute='数据库真实字段名'，为了不给前端显示数据库的字段名
    'register_time': fields.DateTime(dt_format='iso8601'),  # dt_format:日期格式
    'is_delete': isDelete,  # 使用自定义的fields
}


类视图
class UsersResource(Resource):
    @marshal_with(user_fields1)  # 将返回的数据序列化
    def get(self):
        '''查询'''
        users = User.query.all()
        return users

api    
# （类视图，路径），必须添加，不然访问不到
api.add_resource(UsersResource, '/user', endpoint='user')  # endpoint:别名,反向解析url_for()
# 路径传参，用户id，因为上面使用了fields.Url，所以要跟数据库字段一致
api.add_resource(UserResource, '/user/<int:id>', endpoint='single_user')  



    def post(self):
        '''增加'''
        # 获取post提交数据
        args = parser.parse_args()
        username = args.get('username')
        password = args.get('password')
        phone = args.get('phone')
        hobby = args.get('hobby')
        # 头像
        icon = args.get('icon')
        if icon:
            icon.save(os.path.join(settings.UPLOAD_ICON_DIR, icon.filename))  # 图片保存，里面填路径
        return jsonify(username, password, phone, hobby)

    def put(self):
        '''更改'''
        print('endpoint(别名)的使用：', url_for('uuu'))
        return {'msg': 'ok'}

    def delete(self):
        '''删除'''
        return 'deletd'


# 对单个用户操作，路径传参
class UserResource(Resource):
    @marshal_with(user_fields)  # 将返回的数据序列化
    def get(self, id):
        user = User.query.get(id)
        return user

    def put(self):
        print('***************************************endpoint(别名)的使用：', url_for('uuu'))
        return 'ok'



# （类视图，路径），必须添加，不然访问不到
api.add_resource(UsersResource, '/user', endpoint='user')  # endpoint:别名,反向解析url_for()
api.add_resource(UserResource, '/user/<int:id>', endpoint='single_user')  # 路径传参，用户id

---------------------------------------------------------------------------------------------------------------------------
输出复杂数据：字典里套对象
1、marshal(data=user_list, fields=user_fields)
2、user_list = {
    'user_list': fields.List(fields.Nested(user_fields)  # 或fields.Nested(user_fields
}


from flask_restful import Resource, fields, marshal_with, reqparse, inputs, marshal

方法一：marshal
user_fields = {
    'id': fields.Integer,

    # 'username': fields.String,
    'name': fields.String(attribute='username', default='匿名'),  # attribute='数据库真实字段名'，为了不给前端显示数据库的字段名

    'register_time': fields.DateTime(dt_format='iso8601'),  # dt_format:日期格式
    'is_delete': isDelete,  # 使用自定义的fields
}

class UserResource(Resource):
    def post(self):
        users = User.query.all()
        user_list = [i for i in users]

        # 使用marshal返回套叠数据
        data = {
             ......
             'user_list': marshal(data=user_list, fields=user_fields),  # 使用marshal序列化全部用户
             ......
         }
        return data

----------------------------------------------
方法二：装饰器@marshal_with()

# @marshal_with装饰器输出复杂数据，套叠类型
user_list = {
    'name': fields.String,
    'len': fields.Integer,
    'user_list': fields.List(fields.Nested(user_fields))  # 套叠数据序列化,或fields.Nested(user_fields)
}

class UserResource(Resource):
    @marshal_with(user_list)
    def post(self):

        users = User.query.all()
        user_list = [i for i in users]
        
        # 使用@marshal_with装饰器返回套叠数据
        data = {
            'name': user.username,
            'len': len(users),
            'user_list': user_list,   # 列表里套对象，[user1, user2, ......]
        }
        return data
--------------------------------------------------------------------------------------------------------------
蓝图配合api使用
from flask import Blueprint
from flask_restful import Api

# 蓝图
api_user_bp = Blueprint('user_api', __name__)
# 蓝图添加到api
api = Api(api_user_bp)

class UserApi(Resource):
	pass

api.add_resource(UserApi, '/login')
---------------------------------------------------------------------------------------------------------------
前后端分离，前端跟后端不是同一个服务器，需要解决跨域问题(允许跨域)

在后端
方法一：常用
1、第三方扩展解决跨域：pip install flask-cors
2、exts的__init__.py下
	from flask_cors import CORS  # 解决跨域

	# 解决跨域，需要在apps下的__init__初始化
	cors = CORS()
3、apps的__init__.py下初始化
def create_app():
    ......
    # 初始化cors解决跨域
    cors.init_app(app=app, supports_credentials=True)  # 后面是支持证书认证
    
    return app

方法二：创建一个响应对象response，修改请求头部分，缺点：每个类试图的返回都要修改
res = make_response()
res.headers['Access-Control-Allow-Origin'] = '*'  # 允许所有
res.headers['Access-Control-Allow-Methods'] = 'GET, POST'  # 允许的请求方式
res.headers['Access-Control-Allow-Headers'] = 'x-request-with,Content-type'  # 允许的请求头
return res

其它解决跨域：前端ajax，nginx
---------------------------------------------------------------------------------------------------------------------------

前后端分离：后端返回数据格式
	'success': True,  # 是否成功（布尔值）
                'status': 200,  # 状态码（数字）
                'msg': '注册成功',  # 消息（字符串）
                'data': data,  # 数据，键值对形式

例子：
{
    "success": true,
    "status": 200,
    "msg": "注册成功",
    "data": {
        "id": 1,
        "name": "ggg",
        "content": "雕刻技法萨科打开附件<img src="/static/images/image2.jpg" alt="段子">"  # 注意图片返回形式
        "register_time": "2020-10-03T15:41:32"
    }
}

----------------------------------------------------------------------------------------------------------------------------
基于token的认证（登录，用户状态保持），第三方：JWT（json, web, token），比较安全，现在常用

流程上是这样的：

1、用户使用用户名密码来请求服务器
2、服务器进行验证用户的信息
3、服务器通过验证发送给用户一个token
4、客户端存储token，并在每次请求时附送上这个token值
5、服务端验证token值，并返回数据

token每次请求要携带上传递给服务端


实例：
# 获取token并判断
def get_token():
    token = request.headers.get('token')  # 获取请求头的token
    if not token:
        abort(401, msg='未登录')
    uid = cache.get(token)  #  在缓存(redis)中查找
    if not uid：
        abort(401, msg='令牌错误或无效')
    user = User.query.get(uid)
    if not user:
        abort(401, msg='用户不存在')  # 401状态码是内置的，msg不加则为默认值
    g.user = user


使用装饰器认证用户权限
def login_renzheng(func):
    def wrapper(*args, **kwargs):
        get_token()
        return func(*args, **kwargs)
    return wrapper


首次登录成功在redis里添加token
token = str(uuid.uuid4()).replace('-', '')  # 转换成str，替换横杠
cache.set(token，uid)  # token作为key，用户唯一标识作为值（主键或手机号）

@login_renzheng
def post(self):
    # 发布文章，评论等逻辑处理。。。。
    return {'status': 200, 'msg': 'ok'}

----------------------------------------------------------------------------------------------------------------------------
views.py练习完整代码

# flask-restful的练习
from flask import Blueprint, jsonify
from flask_restful import Resource, fields, marshal_with, reqparse, inputs, marshal
from werkzeug.datastructures import FileStorage  # 表单接收图片
from exts import api
from apps.blog_app.models import *
from flask import url_for


# 创建蓝图
restful_bp = Blueprint('restful', __name__, url_prefix='/api')

# --------------------------------------
# 输入：请求解析，就是表单验证
parser = reqparse.RequestParser(bundle_errors=True)  # bundle_errors=True，会将所有验证不通过的message返回
#                     表单的name            类型         必填         错误返回的信息    只要form表单提交的数据
parser.add_argument(name='username', type=str, required=True, help='用户名', location=['form'])
parser.add_argument(name='password', type=str, required=True, help='密码', location=['form', 'args'])
parser.add_argument(name='phone', type=inputs.regex(r'^1[8]\d{9}$'), required=True, help='手机号')
parser.add_argument('hobby', action='append')  # 列表形式：['旅游', '打球']
parser.add_argument('icon', type=FileStorage, location='files')  # 接收图片
# ----------------------------------------

# -----------------------------------------
# 输出：json形式返回数据

# 使用Url，产生一个链接，点击进入详情，相当于在user_fields前面加了一层
user_fields1 = {
    'username': fields.String,
    # absolute:完整的url，例如：http://www.baidu.com
    'url': fields.Url(endpoint='single_user', absolute=True),  # endpoint为api的endpoint
}

# 自定义fields的value值，必须继承fields.Raw,必须重写format方法
class isDelete(fields.Raw):
    def format(self, value):
        return '删除' if value else '未删除'

# 用户表的字段，需跟数据库字段名一致,序列化json返回给前端（get），key默认为模型字段名
user_fields = {
    'id': fields.Integer,

    # 'username': fields.String,
    'name': fields.String(attribute='username', default='匿名'),  # attribute='数据库真实字段名'，为了不给前端显示数据库的字段名

    'register_time': fields.DateTime(dt_format='iso8601'),  # dt_format:日期格式
    'is_delete': isDelete,  # 使用自定义的fields
}

# @marshal_with装饰器输出复杂数据，套叠类型
user_list = {
    'name': fields.String,
    'len': fields.Integer,
    'user_list': fields.List(fields.Nested(user_fields))  # 套叠数据序列化,或fields.Nested(user_fields)
}
# ----------------------------------------

# 类视图
# 对多个用户操作
class UsersResource(Resource):
    @marshal_with(user_fields1)  # 将返回的数据序列化
    def get(self):
        '''查询'''
        users = User.query.all()
        return users

    def post(self):
        '''增加'''
        # 获取post提交数据
        args = parser.parse_args()
        username = args.get('username')
        password = args.get('password')
        phone = args.get('phone')
        hobby = args.get('hobby')
        # 头像
        icon = args.get('icon')
        if icon:
            icon.save(os.path.join(settings.UPLOAD_ICON_DIR, icon.filename))  # 图片保存，里面填路径
        return jsonify(username, password, phone, hobby)

    def put(self):
        '''更改'''
        print('endpoint(别名)的使用：', url_for('uuu'))
        return {'msg': 'ok'}

    def delete(self):
        '''删除'''
        return 'delete'



# 对单个用户操作，路径传参
class UserResource(Resource):
    @marshal_with(user_fields)  # 将返回的数据序列化
    def get(self, id):
        user = User.query.get(id)
        return user

    def put(self):
        print('***************************************endpoint(别名)的使用：', url_for('uuu'))
        return 'ok'

    @marshal_with(user_list)
    def post(self, id):
        '''返回全部用户'''
        user = User.query.get(id)

        users = User.query.all()
        user_list = [i for i in users]

        # 使用marshal返回套叠数据
        # data = {
        #     'name': user.username,
        #     'len': len(users),
        #     'user_list': marshal(data=user_list, fields=user_fields),  # 使用marshal序列化全部用户
        # }

        # 使用@marshal_with装饰器返回套叠数据
        data = {
            'name': user.username,
            'len': len(users),
            'user_list': user_list,
        }
        return data


# （类视图，路径），必须添加，不然访问不到
api.add_resource(UsersResource, '/user', endpoint='user')  # endpoint:别名,反向解析url_for()
# 路径传参，用户id，因为上面使用了fields.Url，所以要跟数据库字段一致
api.add_resource(UserResource, '/user/<int:id>', endpoint='single_user')
